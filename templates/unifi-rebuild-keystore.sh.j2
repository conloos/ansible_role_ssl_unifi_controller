#!/usr/bin/env bash

# Purpose: recreate keystore if cert was renewed
# Author: Frank Dornheim <dornheim@posteo.de> under GPLv2+
# Category: Core
# Override: False

UNIFI_PATH={{ path_to_unifi }}
CERT_FILENAME_PATH={{ cert_for_keystore_path }}
CERT_KEY_PATH={{ key_for_keystore_path }}
CERT_PATH={{ path_to_ssl_dir }}
KEYSTORE=keystore
BACKUP_KEYSTORE="false"
OPENSSL_PATH={{ path_to_ssl }}
KEYTOOL_PATH={{ path_to_keystore }}
PKCS12_PASSWORD={{ vault_unifi_controller.keystore_password }}

#
# Test Block
#

# test keystore path 
if [[ ! -d "$UNIFI_PATH" ]] ; then
  echo "Path to Unifi Installation Directory not found."
  exit 1
fi

# test for keystore file
if [[ ! -f "$UNIFI_PATH/$KEYSTORE" ]] ; then
  echo "The keystore file was not found, this is not an error. A new keystore is created."
fi

# test for keystore and backup setting
if [[ ! -f "$UNIFI_PATH/$KEYSTORE" && "$BACKUP_KEYSTORE" -eq  "true" ]] ; then
  echo "The keystore file was not found, and Backup is true, so error."
  exit 1
fi

# test for cert file
if [[ ! -f "$CERT_FILENAME_PATH" ]] ; then
  echo "The certificate is not found. This is an Error."
  exit 1
fi

# test for key file
if [[ ! -f "$CERT_KEY_PATH" ]] ; then
  echo "The certificate-key is not found. This is an Error."
  exit 1
fi

# test for openssl
if [[ ! -f "$OPENSSL_PATH" ]] ; then
  echo "Can't find openssl at: $OPENSSL_PATH"
  exit 1
fi

# test for keytool
if [[ ! -f "$KEYTOOL_PATH" ]] ; then
  echo "Can't find keytool at: $KEYTOOL_PATH"
  exit 1
fi

#
# Rebuild Keystore
#

# create backup
if [[ "$BACKUP_KEYSTORE" -eq  "true" ]] ; then
  /usr/bin/cp --archive $UNIFI_PATH/$KEYSTORE $UNIFI_PATH/$KEYSTORE.bak
fi

# stop unifi
/usr/bin/systemctl stop unifi

# delete old keystore
if [[ -f "$UNIFI_PATH/$KEYSTORE" ]] ; then
  /usr/bin/rm $UNIFI_PATH/$KEYSTORE
fi

# create p12
$OPENSSL_PATH pkcs12 -export -out $CERT_PATH/cloudkey.p12 -in $CERT_FILENAME_PATH -inkey $CERT_KEY_PATH -passout pass:$PKCS12_PASSWORD

# create keystore 
$KEYTOOL_PATH -importkeystore -srckeystore $CERT_PATH/cloudkey.p12 -srcstoretype PKCS12 -srcstorepass $PKCS12_PASSWORD -destkeystore $UNIFI_PATH/$KEYSTORE -deststoretype PKCS12 -storepass $PKCS12_PASSWORD

# delete old cloudkey
if [[ -f "$CERT_PATH/cloudkey.p12" ]] ; then
  /usr/bin/rm $CERT_PATH/cloudkey.p12
fi

# stop unifi
/usr/bin/systemctl start unifi